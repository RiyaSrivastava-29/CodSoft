import math
        
def print_tabletop(tabletop):
    for row in tabletop:
        print(' '.join(row))
    print()

def check_winner(tabletop):
    for row in tabletop:
        if row[0] == row[1] == row[2] and row[0] != ' ':
            return row[0]
    for col in range(3):
        if tabletop[0][col] == tabletop[1][col] == tabletop[2][col] and tabletop[0][col] != ' ':
            return tabletop[0][col]
    if tabletop[0][0] == tabletop[1][1] == tabletop[2][2] and tabletop[0][0] != ' ':
        return tabletop[0][0]
    if tabletop[0][2] == tabletop[1][1] == tabletop[2][0] and tabletop[0][2] != ' ':
        return tabletop[0][2]
    for row in tabletop:
        if ' ' in row:
            return None
    return 'Tie'

def best_move(tabletop):
    best_val = -math.inf
    move = None
    for (i, j) in empty_cells(tabletop):
        tabletop[i][j] = 'O'
        move_val = minimax(tabletop, False, -math.inf, math.inf)
        tabletop[i][j] = ' '
        if move_val > best_val:
            best_val = move_val
            move = (i, j)
    return move
    
def empty_cells(tabletop):
    return [(i, j) for i in range(3) for j in range(3) if tabletop[i][j] == ' ']

def minimax(tabletop, maximize, a, b):
    winner = check_winner(tabletop)
    if winner == 'X':
        return -10
    elif winner == 'O':
        return 10
    elif winner == 'Tie':
        return 0

    if maximize:
        max_eval = -math.inf
        for (i, j) in empty_cells(tabletop):
            tabletop[i][j] = 'O'
            eval = minimax(tabletop, False, a, b)
            tabletop[i][j] = ' '
            max_eval = max(max_eval, eval)
            a = max(a, eval)
            if b <= a:
                break
        return max_eval
    else:
        min_eval = math.inf
        for (i, j) in empty_cells(tabletop):
            tabletop[i][j] = 'X'
            eval = minimax(tabletop, True, a, b)
            tabletop[i][j] = ' '
            min_eval = min(min_eval, eval)
            b = min(b, eval)
            if b <= a:
                break
        return min_eval

def riya_move(tabletop):
    while True:
        try:
            x, y = map(int, input("Enter your move (row and column between 0-2 with spaces): ").split())
            if tabletop[x][y] == ' ':
                tabletop[x][y] = 'X'
                break
            else:
                print("Invalid move! Try again.")
        except ValueError:
            print("Invalid input! Enter row and column numbers.")

def play_game():
    tabletop = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_tabletop(tabletop)
    
    while True:
        riya_move(tabletop)
        print_tabletop(tabletop)
        if check_winner(tabletop):
            break
        print("AI made the move ->")
        move = best_move(tabletop)
        if move:
            tabletop[move[0]][move[1]] = 'O'
        print_tabletop(tabletop)
        if check_winner(tabletop):
            break

    winner = check_winner(tabletop)
    if winner == 'Tie':
        print("It's a tie!")
    else:
        print(f"The winner is {winner}!")
        
if __name__ == "__main__":
    play_game()
