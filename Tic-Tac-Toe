import math

def print_board(board):
    for row in board:
        print(' '.join(row))
    print()

def check_winner(board):
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != ' ':
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return board[0][2]
    for row in board:
        if ' ' in row:
            return None
    return 'Tie'

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def minimax(board, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == 'X':
        return -10
    elif winner == 'O':
        return 10
    elif winner == 'Tie':
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for (i, j) in get_empty_cells(board):
            board[i][j] = 'O'
            eval = minimax(board, False, alpha, beta)
            board[i][j] = ' '
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for (i, j) in get_empty_cells(board):
            board[i][j] = 'X'
            eval = minimax(board, True, alpha, beta)
            board[i][j] = ' '
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def best_move(board):
    best_val = -math.inf
    move = None
    for (i, j) in get_empty_cells(board):
        board[i][j] = 'O'
        move_val = minimax(board, False, -math.inf, math.inf)
        board[i][j] = ' '
        if move_val > best_val:
            best_val = move_val
            move = (i, j)
    return move

def human_move(board):
    while True:
        try:
            x, y = map(int, input("Enter your move (row and column): ").split())
            if board[x][y] == ' ':
                board[x][y] = 'X'
                break
            else:
                print("Invalid move! Try again.")
        except ValueError:
            print("Invalid input! Enter row and column numbers.")

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    
    while True:
        human_move(board)
        print_board(board)
        if check_winner(board):
            break
        print("AI is making a move...")
        move = best_move(board)
        if move:
            board[move[0]][move[1]] = 'O'
        print_board(board)
        if check_winner(board):
            break

    winner = check_winner(board)
    if winner == 'Tie':
        print("It's a tie!")
    else:
        print(f"The winner is {winner}!")

if __name__ == "__main__":
    play_game()
